import string

inp = []
w = []
l = []
sbox = [
        [['6', '3'], ['7', 'C'], ['7', '7'], ['7', 'B'], ['F', '2'], ['6', 'B'], ['6', 'F'], ['C', '5'], ['3', '0'], ['0', '1'], ['6', '7'], ['2', 'B'], ['F', 'E'], ['D', '7'], ['A', 'B'], ['7', '6']],
        [['C', 'A'], ['8', '2'], ['C', '9'], ['7', 'D'], ['F', 'A'], ['5', '9'], ['4', '7'], ['F', '0'], ['A', 'D'], ['D', '4'], ['A', '2'], ['A', 'F'], ['9', 'C'], ['A', '4'], ['7', '2'], ['C', '0']],
        [['B', '7'], ['F', 'D'], ['9', '3'], ['2', '6'], ['3', '6'], ['3', 'F'], ['F', '7'], ['C', 'C'], ['3', '4'], ['A', '5'], ['E', '5'], ['F', '1'], ['7', '1'], ['D', '8'], ['3', '1'], ['1', '5']],
        [['0', '4'], ['C', '7'], ['2', '3'], ['C', '3'], ['1', '8'], ['9', '6'], ['0', '5'], ['9', 'A'], ['0', '7'], ['1', '2'], ['8', '0'], ['E', '2'], ['E', 'B'], ['2', '7'], ['B', '2'], ['7', '5']],
        [['0', '9'], ['8', '3'], ['2', 'C'], ['1', 'A'], ['1', 'B'], ['6', 'E'], ['5', 'A'], ['A', '0'], ['5', '2'], ['3', 'B'], ['D', '6'], ['B', '3'], ['2', '9'], ['E', '3'], ['2', 'F'], ['8', '4']],
        [['5', '3'], ['D', '1'], ['0', '0'], ['E', 'D'], ['2', '0'], ['F', 'C'], ['B', '1'], ['5', 'B'], ['6', 'A'], ['C', 'B'], ['B', 'E'], ['3', '9'], ['4', 'A'], ['4', 'C'], ['5', '8'], ['C', 'F']],
        [['D', '0'], ['E', 'F'], ['A', 'A'], ['F', 'B'], ['4', '3'], ['4', 'D'], ['3', '3'], ['8', '5'], ['4', '5'], ['F', '9'], ['0', '2'], ['7', 'F'], ['5', '0'], ['3', 'C'], ['9', 'F'], ['A', '8']],
        [['5', '1'], ['A', '3'], ['4', '0'], ['8', 'F'], ['9', '2'], ['9', 'D'], ['3', '8'], ['F', '5'], ['B', 'C'], ['B', '6'], ['D', 'A'], ['2', '1'], ['1', '0'], ['F', 'F'], ['F', '3'], ['D', '2']],
        [['C', 'D'], ['0', 'C'], ['1', '3'], ['E', 'C'], ['5', 'F'], ['9', '7'], ['4', '4'], ['1', '7'], ['C', '4'], ['A', '7'], ['7', 'E'], ['3', 'D'], ['6', '4'], ['5', 'D'], ['1', '9'], ['7', '3']],
        [['6', '0'], ['8', '1'], ['4', 'F'], ['D', 'C'], ['2', '2'], ['2', 'A'], ['9', '0'], ['8', '8'], ['4', '6'], ['E', 'E'], ['B', '8'], ['1', '4'], ['D', 'E'], ['5', 'E'], ['0', 'B'], ['D', 'B']],
        [['E', '0'], ['3', '2'], ['3', 'A'], ['0', 'A'], ['4', '9'], ['0', '6'], ['2', '4'], ['5', 'C'], ['C', '2'], ['D', '3'], ['A', 'C'], ['6', '2'], ['9', '1'], ['9', '5'], ['E', '4'], ['7', '9']],
        [['E', '7'], ['C', '8'], ['3', '7'], ['6', 'D'], ['8', 'D'], ['D', '5'], ['4', 'E'], ['A', '9'], ['6', 'C'], ['5', '6'], ['F', '4'], ['E', 'A'], ['6', '5'], ['7', 'A'], ['A', 'E'], ['0', '8']],
        [['B', 'A'], ['7', '8'], ['2', '5'], ['2', 'E'], ['1', 'C'], ['A', '6'], ['B', '4'], ['C', '6'], ['E', '8'], ['D', 'D'], ['7', '4'], ['1', 'F'], ['4', 'B'], ['B', 'D'], ['8', 'B'], ['8', 'A']],
        [['7', '0'], ['3', 'E'], ['B', '5'], ['6', '6'], ['4', '8'], ['0', '3'], ['F', '6'], ['0', 'E'], ['6', '1'], ['3', '5'], ['5', '7'], ['B', '9'], ['8', '6'], ['C', '1'], ['1', 'D'], ['9', 'E']],
        [['E', '1'], ['F', '8'], ['9', '8'], ['1', '1'], ['6', '9'], ['D', '9'], ['8', 'E'], ['9', '4'], ['9', 'B'], ['1', 'E'], ['8', '7'], ['E', '9'], ['C', 'E'], ['5', '5'], ['2', '8'], ['D', 'F']],
        [['8', 'C'], ['A', '1'], ['8', '9'], ['0', 'D'], ['B', 'F'], ['E', '6'], ['4', '2'], ['6', '8'], ['4', '1'], ['9', '9'], ['2', 'D'], ['0', 'F'], ['B', '0'], ['5', '4'], ['B', 'B'], ['1', '6']]]

dic = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12,'D': 13, 'E': 14, 'F': 15}

hexx = {'0': '0000', '1': '0001', '2': '0010', '3': '0011', '4': '0100', '5': '0101', '6': '0110', '7': '0111',
        '8': '1000', '9': '10 01', 'A': '1010', 'B': '1011', 'C': '1100', 'D': '1101', 'E': '1110', 'F': '1111'}

rcon = [['0', '0', '0', '0', '0', '0', '0', '1'], ['0', '0', '0', '0', '0', '0', '1', '0'],
        ['0', '0', '0', '0', '0', '1', '0', '0'], ['0', '0', '0', '0', '1', '0', '0', '0'],
        ['0', '0', '0', '1', '0', '0', '0', '0'], ['0', '0', '1', '0', '0', '0', '0', '0'],
        ['0', '1', '0', '0', '0', '0', '0', '0'], ['1', '0', '0', '0', '0', '0', '0', '0'],
        ['0', '0', '0', '1', '1', '0', '1', '1'], ['0', '0', '1', '1', '0', '1', '1', '0']]


# User Defined Functions:


def hex2bin(val):
    var = ""
    var += hexx[val]
    return var


def bin2hex(val):
    var1 = ""
    var2 = ""
    var1 = str(val[0]) + str(val[1]) + str(val[2]) + str(val[3])
    for key, value in hexx.items():
        if var1 == value:
            var2 += key
    return var2


def leftshift(val):
    temp = val[0]
    for i in range(1, 4):
        print(val, i, temp)
        val[i - 1] = val[i]
    val[3] = temp


def gfunction(val, n):
    # Step a
    leftshift(val)
    x = []
    # Step b
    for i in range(0, 4):
        xx = []
        xx.append(sbox[dic[val[i][0]]][dic[val[i][1]]][0])
        xx.append(sbox[dic[val[i][0]]][dic[val[i][1]]][1])
        x.append(xx)
    # Step c
    var = []
    temp3 = []
    temp1 = rcon[n - 1]
    temp2 = hexx[x[0][0]] + hexx[x[0][1]]
    for i in range(0, 8):
        temp3.append(str(int(temp1[i]) ^ int(temp2[i])))
    x[0][0] = bin2hex(temp3[0:4])
    x[0][1] = bin2hex(temp3[4:8])
    return x


def xorfunction(val1, val2):
    var = []
    for i in range(0, 4):
        var1 = []
        for j in range(0, 2):
            var2 = []
            val1[i][j] = hex2bin(val1[i][j])
            val2[i][j] = hex2bin(val2[i][j])
            for k in range(0, 4):
                var2.append(str(int(val1[i][j][k]) ^ int(val2[i][j][k])))
                val1[i][j] = bin2hex(val1[i][j])
                val2[i][j] = bin2hex(val2[i][j])
                var2 = str(bin2hex(var2))
                var1.append(var2)
        var.append(var1)
    return var


# Input Statements:
inp = input("Enter the key(32-bit hexadecimal): ")
# Joining two characters:
for i in range(0, 32, 2):
    var = []
    var.append(inp[i])
    var.append(inp[i + 1])
    l.append(var)

# Word Generation:
for i in range(0, 16, 4):
    var = []
    var.append(l[i])
    var.append(l[i + 1])
    var.append(l[i + 2])
    var.append(l[i + 3])
    w.append(var)
# Loop for key generation:
for i in range(0, 10):
    new = []
    for j in range(0, 4):
        new.append(w[4 * (i + 1) - 1][j])
        w.append(xorfunction(w[4 * (i + 1) - 4],gfunction(new, i + 1)))
        w.append(xorfunction(w[4 * (i + 1)],w[4 * (i + 1) - 3]))
        w.append(xorfunction(w[4 * (i + 1) + 1],w[4 * (i + 1) - 2]))
        w.append(xorfunction(w[4 * (i + 1) + 2],w[4 * (i + 1) - 1]))
print("The Keys are:")
keyout = []
for i in range(0, 44, 4):
    var = []
    var.append(w[i])
    var.append(w[i + 1])
    var.append(w[i + 2])
    var.append(w[i + 3])
    keyout.append(var)

for i in range(0, 11):
    print("ROUND #", i + 1)
    for j in range(0, 4):
        for k in range(0, 4):
            for m in range(0, 2):
                print(keyout[i][j][k][m],end==" ")
    print("\n")
